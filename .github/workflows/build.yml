name: Python library

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  COVER_PACKAGE: raygun
  CACHE_VER: 1


jobs:
  build:
    strategy:
      matrix:
        python: ["3.7", "3.8", "3.9"]

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.CI_SSH_KEY }}
        known_hosts: |
          # github.com:22 SSH-2.0-babeld-3c627260
          github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
        if_key_exists: replace

    - name: Venv cache
      uses: actions/cache@v2
      id: venv-cache
      with:
        path: "venv"
        key: venv-${{ matrix.python }}-${{ env.CACHE_VER }}-${{ hashFiles('requirements.txt', 'setup.py') }}
    - name: Wheel cache
      uses: actions/cache@v2
      id: wheel-cache
      with:
        path: "wheel"
        key: wheels-${{ matrix.python }}-${{ env.CACHE_VER }}-${{ hashFiles('requirements.txt', 'setup.py') }}

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}

    - name: Set up build environment
      if: steps.venv-cache.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update && sudo apt-get install -y \
          build-essential \
          linux-headers-generic \
          python3-dev \
          libssl-dev \
          curl \
          git \
          openssh-client
        pip install virtualenv ply setuptools wheel
        virtualenv ./venv
        source ./venv/bin/activate
        pip install -U pip
        pip install -r requirements.txt
        pip install -e .[test]
    - name: Build wheels
      if: steps.wheel-cache.outputs.cache-hit != 'true'
      run: |
        source ./venv/bin/activate
        mkdir -p ./wheel
        pip wheel -f ./wheel -w ./wheel -r ./requirements.txt

    - name: Build dists
      run: |
        source ./venv/bin/activate
        mkdir -p ./dist
        python ./setup.py build bdist_wheel -d ./dist

    - name: Upload dists
      uses: actions/upload-artifact@v2
      with:
        name: dist-${{ matrix.python }}
        path: dist

  test:
    strategy:
      matrix:
        python: ["3.7", "3.8", "3.9"]

    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}

    - name: Venv cache
      uses: actions/cache@v2
      id: venv-cache
      with:
        path: "venv"
        key: venv-${{ matrix.python }}-${{ env.CACHE_VER }}-${{ hashFiles('requirements.txt', 'setup.py') }}

    - name: Test with pytest
      run: |
        source ./venv/bin/activate
        mkdir ./reports
        pytest --cov=${{ env.COVER_PACKAGE }} --cov-report=term-missing --cov-report=html:./reports/coverage/ --junitxml=./reports/junit.xml ./tests

    - name: Upload test reports
      uses: actions/upload-artifact@v2
      with:
        name: test-reports-${{ matrix.python }}
        path: ./reports
